{"version":3,"sources":["Cell.js","Board.js","Game.js","index.js"],"names":["Cell","props","className","value","onClick","Board","map","item","key","cells","i","React","Component","calculateWinner","lines","length","a","b","c","winner","lineIdx","Game","replayGame","setState","stepNumber","xIsNext","history","Array","fill","position","state","this","slice","alert","concat","step","status","current","handleClick","historyItem","jumpTo","x","parseInt","y","getCoordinate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1171d95.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Cell(props) {\n  return (\n    <div className={props.value==='O' ? 'board-cell white': 'board-cell'}  onClick={props.onClick}>\n      {props.value}\n    </div>\n  );\n}\n\nexport default Cell;\n","import React from \"react\";\nimport Cell from \"./Cell\";\n\nclass Board extends React.Component {\n  render() {\n    return (\n      <div className=\"board-table\">\n        <div className=\"board-row\">\n          {[0, 1, 2].map((item) => (\n            <Cell key={item}\n              value={this.props.cells && this.props.cells[item]}\n              onClick={(i) => this.props.onClick(item)}\n            ></Cell>\n          ))}\n        </div>\n\n        <div className=\"board-row\">\n          {[3, 4, 5].map((item) => (\n            <Cell key={item}\n              value={this.props.cells && this.props.cells[item]}\n              onClick={() => this.props.onClick(item)}\n            ></Cell>\n          ))}\n        </div>\n        <div className=\"board-row\">\n          {[6, 7, 8].map((item) => (\n            <Cell key={item}\n              value={this.props.cells && this.props.cells[item]}\n              onClick={(i) => this.props.onClick(item)}\n            ></Cell>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          cells: Array(9).fill(null),\n          position: -1\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const cells = current.cells.slice();\n    if (cells[i]) {\n      return;\n    }\n    if (calculateWinner(cells)) {\n      return alert(\"游戏已结束，请重新开始游戏！\");\n    }\n    cells[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          cells: cells,\n          position: i\n        },\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n\n  replayGame = () => {\n    this.setState({\n      stepNumber: 0,\n      xIsNext: true,\n      history: [\n        {\n          cells: Array(9).fill(null),\n          position: -1\n        },\n      ],\n    });\n  };\n\n  render() {\n    const { stepNumber, history } = this.state;\n    const current = history[stepNumber];\n    const winner = calculateWinner(current.cells);\n\n    let status;\n    if (winner) {\n      status = \"游戏结束，胜方: \" + winner.winner + \"！\";\n    } else if (stepNumber >= 9) {\n      status = \"游戏结束，打为平手!\";\n    } else {\n      status = \"现在轮到: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"title\">\n          <h2>—— 井字棋游戏 ——</h2>\n        </div>\n        <div className=\"game\">\n          {/* 游戏状态 */}\n          <div className=\"top\">{status}</div>\n\n          {/* 游戏棋盘 */}\n          <div className=\"center\">\n            <div className=\"board\">\n              {/* 游戏结束有胜方时连成一条线 board-line*/}\n\n              <div\n                className={\n                  winner\n                    ? `board-line r${winner.lineIdx} ${\n                        winner.winner === \"O\" ? \"white\" : \"\"\n                      }`\n                    : \"board-line\"\n                }\n              ></div>\n\n              <Board\n                cells={current.cells}\n                onClick={(i) => this.handleClick(i)}\n              />\n            </div>\n            <div className=\"step\">\n              <div>\n                {stepNumber === 0\n                  ? \"点击左侧棋盘开始游戏：）\"\n                  : \"游戏步骤（点击可查看历史步骤）：\"}\n              </div>\n\n              {history.map(\n                (historyItem, step) =>\n                  step > 0 && (\n                    <li\n                      key={step}\n                      onClick={() => this.jumpTo(step)}\n                      className={step === stepNumber ? \"cur\" : \"\"}\n                    >\n                      {/* step=0是初始状态 */}第{step}步，\n                      {step % 2 !== 0 ? \"X\" : \"O\"}落于\n                      {getCoordinate(historyItem.position)}\n                    </li>\n                  )\n              )}\n            </div>\n          </div>\n\n          {/* 重新游戏 */}\n          <div className=\"bottom\">\n            <a onClick={this.replayGame}>重新开始游戏</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(cells) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\n      // 匹配哪个结果\n      return {\n        winner: cells[a],\n        lineIdx: i,\n      };\n      // return cells[a];\n    }\n  }\n  return null;\n}\n\nfunction getCoordinate(position) {\n  let x = parseInt(position / 3) + 1;\n  let y = (position % 3) + 1;\n  return `（第${x}行，第${y}列）`;\n}\n\nexport default Game;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./Game\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}